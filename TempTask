using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task2
{
    class Program
    {
        static void Main(string[] args)
        {
            Warehouse warehouse = new Warehouse();
            warehouse.ShowInfo();
            ServiceStation serviceStation = new ServiceStation();
            //serviceStation.ShowWarehouse();
            //serviceStation.CreateQueue();
            //serviceStation.ShowClient();
            Console.ReadLine();
        }
    }
    
    class ServiceStation
    {
        private int ShopAccount = 1000;
        private Random _random = new Random();
        private Queue<Client> _clients = new Queue<Client>();
        public List<Warehouse> _partsInWarehouse = new List<Warehouse>();

        public ServiceStation()
        {
        }

        

        public void ServClients()
        {
            bool isWork = true;

            while (isWork && _clients.Count > 0)
            {

            }
        }
        
        //public int GetRepairPrice(Client client)
        //{
        //    int repairPrice = 0;
        //    int workPayment = 200;

        //    foreach (var part in _partsInWarehouse)
        //    {
        //        if (client.BrokenPart == part._part)
        //        {
        //            repairPrice += part._part.PartPrice * workPayment;
        //            break;
        //        }
        //    }

        //    return repairPrice;
        //}
        
        public void ShowWarehouse()
        {            
            for (int i = 0; i < _partsInWarehouse.Count; i++)
            {
                _partsInWarehouse[i].ShowInfo();
            }
        }

        public void ShowClient()
        {
            foreach (var client in _clients)
            {
                Console.WriteLine($"Требуется замена {client.BrokenPart.PartName}");
            }
        }

        public void CreateQueue()
        {
            int minNumberClient = 6;
            int maxNumberClient = 10;
            int clientsCount = _random.Next(minNumberClient, maxNumberClient);

            for (int i = 0; i < clientsCount; i++)
            {
                _clients.Enqueue(new Client());
            }
        }        
    }


    class Client
    {

        private static Random _random = new Random();        
        public Part BrokenPart { get; private set; }
        
        public Client()
        {
            IdentifyBreackdown();
        }


        private void IdentifyBreackdown()
        {
            BrokenPart = GetPart();
        }

        public Part GetPart()
        {
            List<Part> parts = new List<Part>();
            int part;
            Part brokenPart;
            parts.Add(new Part("Колодки", 250));
            parts.Add(new Part("Фильтр воздушный", 100));
            parts.Add(new Part("Фильтр масляный", 200));
            parts.Add(new Part("Лампа ДС", 150));
            parts.Add(new Part("Масло", 500));
            parts.Add(new Part("Свеча", 50));
            part = _random.Next(0, parts.Count);
            brokenPart = parts[part];            
            return brokenPart;
        }
    }

    class SparePartsDataBase
    {
        public List<Part> parts = new List<Part>();

        public SparePartsDataBase()
        {
            parts.Add(new Part("Колодки", 250));
            parts.Add(new Part("Свеча", 50));
            parts.Add(new Part("Масло", 500));
            parts.Add(new Part("Лампа ДС", 150));
            parts.Add(new Part("Фильтр масляный", 200));
            parts.Add(new Part("Фильтр воздушный", 100));
            parts.Add(new Part("Тосол", 150));
        }
    }
  
    class Warehouse
    {
        private Random _random = new Random();
        private List<WarehouseCell> _partsInWarehouse = new List<WarehouseCell>();
        SparePartsDataBase dataBase = new SparePartsDataBase();
        public Warehouse()
        {
            FillWarehouse(6);            
        }

        private void FillWarehouse(int sparePart)
        {
            int partAmount = _random.Next(3, 6);
            
            for (int i = 0; i < dataBase.parts.Count; i++)
            {
                _partsInWarehouse.Add(new WarehouseCell(dataBase.parts[i], partAmount));
            }
        }

        public void ShowInfo()
        {
            for (int i = 0; i < _partsInWarehouse.Count; i++)
            {
                Console.WriteLine($"Деталь: {i + 1}.{_partsInWarehouse[i]._part.PartName} Цена {_partsInWarehouse[i]._part.PartPrice} Количество {_partsInWarehouse[i]._partAmount}");
            }

            //Console.WriteLine($"Деталь: {_partsInWarehouse} Цена: {_part.PartPrice} Количество: {_partsInWarehouse}");
        }

        //public bool TryRepairCar(Client client)
        //{
        //    Console.WriteLine("Введите номер детали для замены");
        //    bool isNumber = int.TryParse(Console.ReadLine(), out int partID);

        //    if (isNumber == false)
        //    {
        //        Console.WriteLine("Введите число!");
        //        return false;
        //    }
        //    else if (partID > 0 && partID - 1 < serviceStation._partsInWarehouse.Count && client.BrokenPart == serviceStation._partsInWarehouse[partID - 1]._part)
        //    {
        //        int partToChange = partID - 1;

        //        for (int i = 0; i < serviceStation._partsInWarehouse.Count; i++)
        //        {
        //            if (serviceStation._partsInWarehouse[i]._partAmount > 0)
        //            {
        //                _partAmount--;
        //            }
        //            else
        //            {
        //                serviceStation._partsInWarehouse.RemoveAt(partToChange);
        //            }
        //        }
        //        return true;
        //    }
        //    else
        //    {
        //        Console.WriteLine("Такой детали нет на складе");
        //    }
        //    return false;
        //}

    }

    class WarehouseCell
    {
        public Part _part;
        public int _partAmount;

        public WarehouseCell(Part part, int partAmount)
        {
            _partAmount = partAmount;
            _part = part;
        }
    }

    class Part
    {
        public string PartName { get; private set; }
        public int PartPrice { get; private set; }

        public Part(string partName, int partPrice)
        {
            PartName = partName;
            PartPrice = partPrice;
        }        
    }
}
