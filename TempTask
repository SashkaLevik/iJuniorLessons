using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task2
{
    class Program
    {
        static void Main(string[] args)
        {
            bool isPlaying = true;
            string userInput;
            int maxValueCount = 21;
            Gambler player = new Gambler();
            Gambler enemy = new Gambler();
            Deck deck = new Deck();
            Game game = new Game();
            Console.WriteLine("Необходимо набрать очков больше чем у противника " +
                "но не превысить максимум");
            Console.SetCursorPosition(0, 1);
            Console.WriteLine("1.Вытянуть карту\n2.Завершить и показать результат\n3.Выход");           

            while (isPlaying)
            {
                Console.SetCursorPosition(40, 2);
                Console.Write($"Ваш счёт        { player.GetValueCount()}/{maxValueCount}\n");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case "1":
                        game.PickCard(player, enemy, deck);                         
                        break;
                    case "2":
                        game.ShowWiner(player, enemy);                       
                        break;
                    case "3":
                        isPlaying = false;
                        break;
                }
            }
        }
    }
   
    class Card
    {
        public string CardSuit { get; private set; }
        public int CardValue { get; private set; }

        public Card(string cardSuit, int cardValue)
        {
            CardSuit = cardSuit;
            CardValue = cardValue;
        }
    }

    class Deck
    {
        private Random _random = new Random();
        private List<Card> _cards = new List<Card>();

        public Deck()
        {
            _cards.Add(new Card("Пики", GetCardValue()));
            _cards.Add(new Card("Крести", GetCardValue()));
            _cards.Add(new Card("Бубны", GetCardValue()));
            _cards.Add(new Card("Червы", GetCardValue()));
            _cards.Add(new Card("Пики", GetCardValue()));
            _cards.Add(new Card("Крести", GetCardValue()));
            _cards.Add(new Card("Бубны", GetCardValue()));
            _cards.Add(new Card("Червы", GetCardValue()));
            _cards.Add(new Card("Пики", GetCardValue()));
            _cards.Add(new Card("Крести", GetCardValue()));
            _cards.Add(new Card("Бубны", GetCardValue()));
            _cards.Add(new Card("Червы", GetCardValue()));
        }

        public int GetCardValue()
        {
            int cardValue;
            int minCardValue = 2;
            int maxCardValue = 8;
            cardValue = _random.Next(minCardValue, maxCardValue);
            return cardValue;
        }

        public bool TryGetCard(out Card card)
        {
            if (_cards.Count > 0)
            {
                card = _cards[GetCardNumber()];
                _cards.Remove(card);
                return true;
            }
            else
            {
                card = null;
                return false;
            }
        }

        private int GetCardNumber()
        {
            int numberCard = 0;
            int minimalNumberCard = 0;
            int maximumNumberCard = 12;

            if (_cards.Count > maximumNumberCard)
            {
                numberCard = _random.Next(minimalNumberCard, maximumNumberCard);
            }

            return numberCard;
        }
    }

    class Gambler
    {
        private List<Card> _hand = new List<Card>();
        
        public bool GetCard(Deck deck)
        {
            if (deck.TryGetCard(out Card card))
            {
                _hand.Add(card);                
            }
            else
            {
                Console.WriteLine("В колоде законились карты");
            }
            return true;
        }

        public int GetValueCount()
        {
            int cardValueCount = 0;
            foreach (var card in _hand)
            {
                cardValueCount += card.CardValue;
            }
            return cardValueCount;
        }

        public void ShowCards()
        {
            for (int i = 0; i < _hand.Count; i++)
            {
                Console.WriteLine($"{_hand[i].CardSuit} {_hand[i].CardValue}");
            }
        }        
    }
    
    class Game
    {        
        public void ShowResult(Gambler player, Gambler enemy)
        {
            int maxValueCount = 21;

            if (player.GetValueCount() < maxValueCount && player.GetValueCount() > enemy.GetValueCount())
            {
                Console.SetCursorPosition(40, 10);
                Console.WriteLine("Вы победили!");
            }
            else if (player.GetValueCount() < maxValueCount && enemy.GetValueCount() > maxValueCount)
            {
                Console.SetCursorPosition(40, 10);
                Console.WriteLine("Вы победили!");
            }
            else if (player.GetValueCount() == enemy.GetValueCount())
            {
                Console.SetCursorPosition(40, 10);
                Console.WriteLine("Ничья, попробуйте ещё");
            }
            else
            {
                Console.SetCursorPosition(40, 10);
                Console.WriteLine("Увы, вы проиграли");
            }
        }

        public void PickCard(Gambler player, Gambler enemy, Deck deck)
        {
            player.GetCard(deck);
            enemy.GetCard(deck);
            Console.SetCursorPosition(0, 10);
            Console.WriteLine("Ваши карты");
            player.ShowCards();                        
        }

        public void ShowWiner(Gambler player, Gambler enemy)
        {
            int maxValueCount = 21;
            Console.SetCursorPosition(0, 18);
            Console.WriteLine("Карты противника");
            enemy.ShowCards();
            Console.SetCursorPosition(40, 3);
            Console.Write($"Счёт противника {enemy.GetValueCount()}/{maxValueCount}");
            ShowResult(player, enemy);
        }   
    }
}
